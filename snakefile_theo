configfile: 'config/config.yaml'

ref = config["DATA"]["REFERENCE"]
strain = config["DATA"]["ASSEMBLY"]
output_dir = config["DATA"]["OUTPUT"]
log_dir = f"{output_dir}LOGS/"

BASENAME_STRAIN, = glob_wildcards(strain+"{samples}_FLYE.fasta", followlinks=True)

def get_threads(rule, default):
    """
    give threads or 'cpus-per-task from cluster_config rule : threads to SGE and cpus-per-task to SLURM
    """
    if cluster_config:
        if rule in cluster_config and 'threads' in cluster_config[rule]:
            return int(cluster_config[rule]['threads'])
        elif rule in cluster_config and 'cpus-per-task' in cluster_config[rule]:
            return int(cluster_config[rule]['cpus-per-task'])
        elif '__default__' in cluster_config and 'cpus-per-task' in cluster_config['__default__']:
            return int(cluster_config['__default__']['cpus-per-task'])
        elif '__default__' in cluster_config and 'threads' in cluster_config['__default__']:
            return int(cluster_config['__default__']['threads'])
    if workflow.global_resources["_cores"]:
        return workflow.global_resources["_cores"]
    return default

rule final:
    """To get all file at the end"""
    input:
            quast_final_results = f"{output_dir}QUAST/report.pdf",
            busco_final_results = expand(f"{output_dir}BUSCO/result_busco/{{samples}}_FLYE.fasta/short_summary.specific.capnodiales_odb10.{{samples}}_FLYE.fasta.txt",samples=BASENAME_STRAIN),
            figure_final = f"{output_dir}BUSCO/result_busco/busco_summaries/busco_figure.png"

rule quast_full_contigs:
    """make quast report for our strain assembly"""
    threads: get_threads("quast_full_contigs", 6)
    input:
            fasta = expand(f"{strain}{{samples}}_FLYE.fasta",samples = BASENAME_STRAIN),
            reference = ref
    output:
            quast_results = f"{output_dir}QUAST/report.pdf"
    params:
        dir = directory(f"{output_dir}QUAST/")
    log :
            error =  f'{log_dir}quast/quast.e',
            output = f'{log_dir}quast/quast.o'
    message:
            f"""
             Running {{rule}}
                Input:
                    - Fasta : {{input.fasta}}
                    - Ref : {{input.ref}}
                Output:
                    - sa_file: {{output.quast_results}}
                Others
                    - Threads : {{threads}}
                    - LOG error: {{log.error}}
                    - LOG output: {{log.output}}
            """
    envmodules:
            "quast_local"
            "circos/0.69.8"
    shell:
            """
                quast.py {input.fasta} --circos -m 3000 -t 6 --fragmented -r {input.reference} -o {params.dir} 1>{log.output} 2>{log.error}
            """

rule busco:
    """make quast report for our strain assembly"""
    threads: get_threads("busco", 8)
    input:
            fasta = f"{strain}"
    output:
            busco_out = expand(f"{output_dir}BUSCO/result_busco/{{samples}}_FLYE.fasta/short_summary.specific.capnodiales_odb10.{{samples}}_FLYE.fasta.txt",samples=BASENAME_STRAIN)
    params:
            busco_out_path = f"{output_dir}BUSCO/",
            busco_result = f"result_busco"


    log :
            error =  f'{log_dir}busco/busco.e',
            output = f'{log_dir}busco/busco.o'
    message:
            f"""
             Running {{rule}}
                Input:
                    - Fasta : {{input.fasta}}
                Output:
                    - sa_file: {{output.busco_out}}
                Others
                    - Threads : {{threads}}
                    - LOG error: {{log.error}}
                    - LOG output: {{log.output}}
            """
    envmodules:
            "busco/5.1.2"
    shell:
            """
                busco -i {input.fasta} -l capnodiales_odb10 -m genome --out_path {params.busco_out_path} -o {params.busco_result} --download_path {params.busco_out_path}  -f 1>{log.output} 2>{log.error}
            """

rule busco_figure:
    """make quast report for our strain assembly"""
    threads: get_threads("busco_figure", 8)
    input:
            txt_busco = rules.busco.output.busco_out
    output:
            figure = f"{output_dir}BUSCO/result_busco/busco_summaries/busco_figure.png"
    params:
            folder = "busco_summaries"
    log :
            error =  f'{log_dir}busco_figure/busco.e',
            output = f'{log_dir}busco_figure/busco.o'
    message:
            f"""
             Running {{rule}}
                Input:
                    - Fasta : {{input.txt_busco}}
                Output:
                    - figure_file: {{output.figure}}
                Others
                    - Threads : {{threads}}
                    - LOG error: {{log.error}}
                    - LOG output: {{log.output}}
            """
    envmodules:
            "busco/5.1.2"
    shell:
            """
                mkdir -p {output_dir}BUSCO/result_busco/{params.folder}
                cp {input.txt_busco} {output_dir}BUSCO/result_busco/{params.folder}/
                generate_plot.py -wd {output_dir}BUSCO/result_busco/{params.folder}/ 1>{log.output} 2>{log.error}

            """

